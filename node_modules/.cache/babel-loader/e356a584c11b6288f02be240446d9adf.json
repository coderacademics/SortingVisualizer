{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _collections = require('../collections');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// SENTINEL constants are from https://github.com/facebook/immutable-js\n\n\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\n\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nconst getImmutableName = name => 'Immutable.' + name;\n\nconst printAsLeaf = name => '[' + name + ']';\n\nconst SPACE = ' ';\nconst LAZY = '…'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '{' + (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) + '}'; // Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\n\n\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n\n  };\n}\n\nconst printImmutableRecord = (val, config, indentation, depth, refs, printer) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE + '{' + (0, _collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';\n};\n\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n\n  if (val[IS_KEYED_SENTINEL]) {\n    return name + SPACE + '{' + ( // from Immutable collection of entries or from ECMAScript object\n    val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';\n  }\n\n  return name + SPACE + '[' + (val._iter || // from Immutable collection of values\n  val._array || // from ECMAScript array\n  val._collection || // from ECMAScript collection in immutable v4\n  val._iterable // from ECMAScript collection in immutable v3\n  ? (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';\n};\n\nconst printImmutableValues = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '[' + (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + ']';\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');\n  }\n\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');\n  }\n\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');\n  }\n\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');\n  }\n\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  } // For compatibility with immutable v3 and v4, let record be the default.\n\n\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n}; // Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\n\n\nexports.serialize = serialize;\n\nconst test = val => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","test","serialize","default","_collections","require","IS_ITERABLE_SENTINEL","IS_LIST_SENTINEL","IS_KEYED_SENTINEL","IS_MAP_SENTINEL","IS_ORDERED_SENTINEL","IS_RECORD_SENTINEL","IS_SEQ_SENTINEL","IS_SET_SENTINEL","IS_STACK_SENTINEL","getImmutableName","name","printAsLeaf","SPACE","LAZY","printImmutableEntries","val","config","indentation","depth","refs","printer","type","maxDepth","printIteratorEntries","entries","getRecordEntries","i","next","_keys","length","key","done","get","undefined","printImmutableRecord","_name","printImmutableSeq","_iter","_object","_array","_collection","_iterable","printIteratorValues","values","printImmutableValues","plugin","_default"],"sources":["C:/Users/Saikat Mohanta/Desktop/Web development/React projects/Sorting Visualizer/sortingvisualizer/node_modules/pretty-format/build/plugins/Immutable.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _collections = require('../collections');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\n\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nconst getImmutableName = name => 'Immutable.' + name;\n\nconst printAsLeaf = name => '[' + name + ']';\n\nconst SPACE = ' ';\nconst LAZY = '…'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '{' +\n      (0, _collections.printIteratorEntries)(\n        val.entries(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      '}'; // Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\n\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\n\nconst printImmutableRecord = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer\n) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth\n    ? printAsLeaf(name)\n    : name +\n        SPACE +\n        '{' +\n        (0, _collections.printIteratorEntries)(\n          getRecordEntries(val),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        ) +\n        '}';\n};\n\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n\n  if (val[IS_KEYED_SENTINEL]) {\n    return (\n      name +\n      SPACE +\n      '{' + // from Immutable collection of entries or from ECMAScript object\n      (val._iter || val._object\n        ? (0, _collections.printIteratorEntries)(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          )\n        : LAZY) +\n      '}'\n    );\n  }\n\n  return (\n    name +\n    SPACE +\n    '[' +\n    (val._iter || // from Immutable collection of values\n    val._array || // from ECMAScript array\n    val._collection || // from ECMAScript collection in immutable v4\n    val._iterable // from ECMAScript collection in immutable v3\n      ? (0, _collections.printIteratorValues)(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        )\n      : LAZY) +\n    ']'\n  );\n};\n\nconst printImmutableValues = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '[' +\n      (0, _collections.printIteratorValues)(\n        val.values(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      ']';\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map'\n    );\n  }\n\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'List'\n    );\n  }\n\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set'\n    );\n  }\n\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'Stack'\n    );\n  }\n\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  } // For compatibility with immutable v3 and v4, let record be the default.\n\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n}; // Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\n\nexports.serialize = serialize;\n\nconst test = val =>\n  val &&\n  (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}